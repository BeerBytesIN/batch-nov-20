class Solution {
    public int[] sort(int[] nums){
        int n=nums.length;
        for(int i=n/2-1;i>=0;i--)
            heapify(nums,n,i);
        
        for(int i=n-1;i>0;i--){
            int temp=nums[0];
            nums[0]=nums[i];
            nums[i]=temp;
            
            heapify(nums,i,0);
        }
        return nums;
    }
    public void heapify(int[] nums, int n, int i){
        int largest = i;
        int left = 2*i+1;
        int right = 2*i+2;
        if(left<n && nums[left]>nums[largest])
            largest=left;
        if(right<n && nums[right]>nums[largest])
            largest=right;
        if(largest!=i){
            int temp=nums[largest];
            nums[largest]=nums[i];
            nums[i]=temp;
            heapify(nums,n,largest);
        }
    }
    public int singleNumber(int[] nums) {
        if(nums.length==1)
            return nums[0];
        int[] num = sort(nums);
        if(num[0]!=num[1])
            return num[0];
        if(num[num.length-1]!=num[num.length-2])
            return num[num.length-1];
        for(int i=1;i<num.length;i+=3){
            if(num[i]!=num[i-1])
                return num[i-1];
        }
        return 0;
    }
}